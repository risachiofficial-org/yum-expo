---
description: 
globs: 
alwaysApply: false
---
# Yumazing App Overview

Yumazing is a cross-platform mobile application built with Expo and React Native. Its primary goal is to help users cook by providing recipes from the community. The app also features a system to reward users with tokens and NFTs for achieving certain milestones.

For a more comprehensive overview of the product vision and features, please refer to the document: [`So bascially we are building a cooking assitant b....pdf`](mdc:So bascially we are building a cooking assitant b....pdf).

## Project Structure

The project is organized as follows:

*   **`app/`**: Contains the main application screens and navigation setup using Expo Router.
    *   **`app/(tabs)/`**: This directory holds the layout and screens for the tab-based navigation in the app. Based on the UI, these tabs are likely Home, Explore, Planner, and Account.
        *   [`app/(tabs)/_layout.tsx`](mdc:app/(tabs)/_layout.tsx): Defines the layout for the tabs themselves, likely using `expo-router`'s `Tabs` component. It configures the appearance and behavior of the tab bar.
        *   [`app/(tabs)/index.tsx`](mdc:app/(tabs)/index.tsx): Represents the screen for the first tab, which is conventionally the "Home" screen. This is where users might see an overview, recently added recipes, or featured content.
        *   [`app/(tabs)/two.tsx`](mdc:app/(tabs)/two.tsx): Represents the screen for the second tab. Given the UI, this could be the "Explore" screen for recipe discovery or potentially another core feature. (Note: The filename `two.tsx` is generic; it would be beneficial to rename it to reflect its actual purpose, e.g., `explore.tsx` or `planner.tsx`, once its function is solidified).
    *   [`app/_layout.tsx`](mdc:app/_layout.tsx): Main layout component for the overall app, potentially wrapping the tab navigator and handling global styles or providers.
    *   [`app/modal.tsx`](mdc:app/modal.tsx): A modal screen, possibly used for actions like creating a new recipe or displaying detailed information.
*   **`assets/`**: Stores static assets like images and fonts.
    *   `assets/fonts/`: Custom fonts used in the app.
    *   `assets/images/`: Images, including icons and splash screens.
*   **`components/`**: Houses reusable UI components that are used across different screens.
    *   `components/Themed.tsx`: Components that adapt to the current color scheme.
    *   `components/EditScreenInfo.tsx`: An example component (likely for placeholder content or development purposes).
*   **`constants/`**: Defines application-wide constants.
    *   `constants/Colors.ts`: Defines the color palette for the app.

## Key Configuration Files

*   **[`app.json`](mdc:app.json)**: Expo configuration file. It includes settings for the app's name, version, icon, splash screen, orientation, and platform-specific configurations for iOS, Android, and Web. It also lists plugins like `expo-router` and experiments like `typedRoutes`.
*   **[`package.json`](mdc:package.json)**: Lists project dependencies (e.g., `expo`, `react`, `react-native`, `expo-router`) and development dependencies (e.g., `typescript`, `jest`). It also defines scripts for starting the app, running tests, etc.
*   **[`tsconfig.json`](mdc:tsconfig.json)**: TypeScript configuration file, extending `expo/tsconfig.base`. It includes strict mode and path aliases (e.g., `@/*` pointing to `./*`).

## Core Functionality (MVP Focus for Hackathon)

*   **Recipe Discovery**: Users can browse and search for recipes. (Focus on displaying a list of recipes, potentially from a mock data source initially).
*   **View Recipe Details**: Users can tap on a recipe to see its details (ingredients, steps).
*   **Cooking Assistance**: Basic step-by-step instructions for a selected recipe.
*   **(Future) Rewards System**: Placeholder for token/NFT rewards; full implementation might be out of scope for an MVP unless critical.
*   **(Future) Community Features**: Recipe submission by users might be a post-MVP feature.

Given the hackathon context, the immediate priority is to get the core recipe viewing and cooking assistance flow working. The structure provided by Expo Router with `app/(tabs)` is a good starting point for organizing the main sections of the app.
